## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
df
dfcol
dfgood<-complete.cases(dfcol)
dfgood
dfgoodgraph<-dfcol[dfgood,]
dfgoodgraph
dfgoodgraph<-dfcol[dfgood,,drop=F]
dfgoodgraph
dfgoodgraph<-dfcol[dfgood,]
mean(dfgoodgraph)
specdata
y<-if(x>3){10} else {0}
X<-4
y
y<-if(x>3){10} else {0}
y<- if(x>3)
afsd
y<-if(x>3){}
y<-if(x>3){
10
}
y<-if(x>3){
10
} else {
0
}
for(i in 1:10)
{}
for(i in 1:10){}
for(i in 1:10){
print(i)
}
x<-c("a","b","c")
for(i in 1:3) print(x[i])
for(let in x) print let
for(let in x) print(let)
?rbinom
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x<-rbinom(2,2,0.5)
x
x<-rbinom(2,2,0.5)
x
x<-rbinom(2,2,0.5)
x
z<-5
while(z>3 && z<10)
{
x<-rbinom(1,1,0.5)
print(x);
if(x==1){
z<-z+1
}
else{
z<-z-1
}
print(z)
}
while(z>3 && z<10)
+ {
+ x<-rbinom(1,1,0.5)
+ print(x);
+ if(x==1){
+ z<-z+1
+ }
+ else{
+ z<-z-1
+ }
+ print(z)
+ }
while(z>3 && z<10)
{
x<-rbinom(1,1,0.5)
print(x);
if(x==1){
z<-z+1
z<-z+1
}
else{
z<-z-1
print(z)
}
}
add1<-function(x, y){
x + y
}
add1(3,8)
subset10<-function(x){
for(i in 10:x)
print(i)
}
subset10(20)
subset10<-function(x){
use<- x > 10
print(x[use])
}
subset10(20)
subset10(9)
x<-1:20
subset10(x)
subset10<-function(x, n=10){
use<- x > n
print(x[use])
}
subset10(x)
subset10(x,12)
airquality
meancol <- function(x){
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(y[,i], na.rm=T)
}
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i], na.rm=T)
}
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i], na.rm=T)
}
means
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i])
}
means
}
meancol(airquality)
?cor
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?paste
x<-"How are you"
y<-"Raunak"
z<-paste(x,y,sep=" ",collapse=NULL)
z
z<-paste(x,y)
z
?copy
z<-"Kochar"
w<-paste(x,y,z)
w
?lm
l<-lm(z)
l<-lm(x)
l<-lm(5)
?stats
lm(10)
lm<-function(x){
x*x
}
lm(10)
search()
?lm
add1<-1
f(1)
View(data)
View(dfcon)
View(dfcol)
View(dfnew)
View(dftempss)
view(data)
lapply
x<-list(a<-1:5,b<-rnorm(10))
lapply(x,mean)
lapply(x,mean)
x<-list(a<-1:5,b<-rnorm(10))
lapply(x,mean)
?rnorm
x<-list(a<-1:5,b<-rnorm(10))
b
mean(b)
lapply(x,mean)
?runif
u<-runif(20)
u
x<-1:20
lapply(x,runif)
lapply(x,runif,min=0,max=10)
install.packages("swirl")
install.packages("swirl")
x
airquality
install.packages
install.packages()
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
install_from_swirl("R Programming")
swirl()
5+7
x<=5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
x<-list(a = 1:5 , b = rnorm(10))
lapply(x, mean)
b<-rnorm(10)
b
b<-rnorm(10)
b
x<-list(a = 1:5 , b = rnorm(10))
lapply(x, mean)
b<-rnorm(10,1)
b
x<-list(a = 1:5 , b = rnorm(10))
x
lapply(x, mean)
x<-1:4
lapply(x, runif)
lapply(x, runif, min = 0 , max = 10)
x<-1:10
lapply(x, runif)
x<- list(a=matrix(1:6,3,2), b = matrix(1:10,5,2))
x
lapply(x, funtion(elt) elt[,1])
lapply(x, elt elt[,1])
lapply(x, funtion(elt) elt[,1])
lapply(x, funtion(elt) {elt[,1]})
lapply(x, funtion(elt) elt[,1])
x<- list(a=matrix(1:6,3,2), b = matrix(1:4,2,2))
lapply(x, funtion(e) e[,1])
x<-list(a = 1:5 , b = rnorm(10))
sapply(x, mean)
str(apply)
?apply
x<-matrix(1:200,10,20)
x
x<-matrix(1:200,20,10)
x
apply(x,2,mean)
apply(x,1,mean)
rowMeans()x
rowMeans(x)
x<-matrix(rnorm(200),20,10)
apply(x,1,quantile, c(.25,.75))
mapply(rep, 1:4, 4:1)
mapply(rep, 1:4, 1:5)
mapply(rep, 1:4, 1:8)
x<-rnorm(5,1,2)
mean(x)
x
x<-rnorm(5)
mean(x)
?gl
gl(2,1,20)
gl(1,2,20)
gl(3,1,21)
gl(3,1,20)
gl(3,10)
f<-gl(2,10)
x<-c(rnorm(10),runif(10))
x
split(x,f)
mean(x$1)
mean(x$'1')
mean(x)
lapply(split(x,f),mean)
a<-0.1633237+0.569499
a/2
head(airquality)
datasets
lapply(split(airquality$Month),mean)
lapply(split(airquality,airquality$Month),mean)
s<-split(airquality,airquality$Month)
lapply(s, function(x) colmeans(x[,c("Ozone","Solar.R")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R")]))
lapply(s, function(x) colmeans(x[,c("Ozone","Solar.R","Wind")]))
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm = TRUE))
load
load()
x<-matrix(1:4,2,2)
y<-solve(x)
y
x*y
x%*%y
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("Getting cached inverse of a matrix");
return(inv)
data <- x$get()
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
}
cacheSolve(matrix(1:9,3,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse
if(!is.null(inv)){
message("Getting cached inverse of a matrix");
return(inv)
data <- x$get()
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
}
cacheSolve(matrix(1:9,3,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)){
message("Getting cached inverse of a matrix");
return(inv)
}
data <- x$get()
inv <- solve(x, ...)
x$setinverse(inv)
inv
}
cacheSolve(matrix(1:9,3,3))
makeCacheMatrix(1:9,3,3)
makeCacheMatrix(1:9)
cacheSolve(matrix(1:9,3,3))
makeCacheMatrix <- function(x = matrix()) {
# inv will store the cached inverse matrix
inv <- NULL
# Setter for the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Getter for the matrix
get <- function() x
# Setter for the inverse
setinv <- function(inverse) inv <<- inverse
# Getter for the inverse
getinv <- function() inv
# Return the matrix with our newly defined functions
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
# cacheSolve: Compute the inverse of the matrix. If the inverse is already
# calculated before, it returns the cached inverse.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the inverse is already calculated, return it
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse is not yet calculated, so we calculate it
data <- x$get()
inv <- solve(data, ...)
# Cache the inverse
x$setinv(inv)
# Return it
inv
}
cacheSolve(matrix(1:9,3,3))
source(rankall.R)
source("rankall.R")
getwd()
setwd("C:/Users/RAUNAK KOCHAR/Documents/prog2/")
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
rankall("heart attack","best")
source("rankall.R")
rankall("heart attack","best")
source("rankall.R")
rankall("heart attack","best")
rankall("heart attack","best")
source("rankall.R")
rankall("heart attack","best")
submit()
submit()
submit()
