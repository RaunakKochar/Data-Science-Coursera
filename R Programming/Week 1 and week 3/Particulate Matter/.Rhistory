x/y
x<-matrix(1:4,2,2)
y
y<-matrix(rep(10,4),2,2)
x*y
x%*%y
x%+%y
x%*%y
x<-4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(1,3, 5)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x<-1:4
y<-2
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x == 10] <- 4
x
x[x . 10] <- 4
x[x > 10] <- 4
x
data<-read.table("C:\Users\RAUNAK KOCHAR\Downloads\dataset1")
data<-read.table("C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
data<-read.table("C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
data<-read.csv("C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
data
?read.csv
names(data)
?data.frame
df[1:2,]
df<-(file="C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv",nrows=2)
df<-read.csv(file="C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv",nrows=2)
df
count(file="C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv",nrows)
nrow(data)
keep<-2
rmv<-countLines("C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
rmv<-countLines("C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
?countline
?countlines
?countLines
df<-read.csv(file="C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
x<-matrix(df,47,1)
df<-read.csv(file="C:/Users/RAUNAK KOCHAR/Downloads/dataset1/hw1_data.csv")
as.character(df[47,1])
bad<-!complete.cases(df)
bad
bad<-complete.cases(df)
bad
bad<-!complete.cases(df)
df
bad<-!complete.cases(df)
df[bad,][1:6,]
df
bad=complete.cases(df)
dfnew=df[bad,][1:6,]
dfnew
df
dfnew=df[bad,][,]
dfnew
nrows(df)-nrows(dfnew)
nrow(df)-nrow(dfnew)
dfnew
dfnew
df-dfnew
?complete.cases
df
dfcol<-df[,1]
dfcol
dfcoln<-!complete cases(dfcol)
dfcoln<-!complete.cases(dfcol)
dfcoln
dfcol
class(dfcol)
dfcol$NA
x<-is.na(dfcol)
x
good<-complete.cases(dfcol)
good
dfgood<-dfcol[good]
dfgood
nrow(dfgood)
nrows(dfgood)
dfcol<-df[1,,drop=F]
dfcol
dfcol<-df[,1,drop=F]
dfcol<-df[,1,drop=F]
dfcol
good<-complete.cases(dfcol)
good
good<-complete.cases(dfcol,drop=F)
good<-complete.cases(dfcol),drop=f
good<-complete.cases(dfcol)
dfcoltrue<-dfcol[good,,drop=F]
dfcol
dfcoltrue
nrow(dfcol)-nrow(dfcoltrue)
?mean
mean(dfcoltrue)
dfcoltrue<-dfcol[good,]
dfcoltrue
mean(dfcoltrue)
df
dfcon<-df[,1][,4]
dfcon<-df[c(1,4)]
dfcon
good<-complete.cases(dfcon)
dfconc<-dfcon[good,]
dfconc
?where
dfconcone<-dfconc[,1]>30
dfconcone
df
dfcol
good=complete.cases(dfcol)
dfcolgood=dfcol[good,]
nrow(dfcol)-nrow(dfcolgood)
dfcolgood
nrow(dfcolgood)
dfcolgood=dfcol[good,,drop=F]
nrow(dfcol)-nrow(dfcolgood)
dfcolgood
mean(dfcolgood)
dfcolgood=dfcol[good,]
mean(dfcolgood)
df
dfgood
dfcol
dfgood=dfcol[good,,drop=F]
dfgood
dftemp=df[c(4)]
dftemp
dftemp=df[c(4,5)]
dftemp
dftemps=dftemp[,,month=6]
dftemps=subset(dftemp,month=6)
dftemps
dftemps=subset(dftemp,month==6)
?subset
dftemps=subset(df,Month==6,select=c(Temp,Month))
dftemps
mean(dftemps)
dftempss=dftemps[c(1)]
dftempss
dftempss=dftemps[c(1),drop=T]
dftemps
mean(dftems[[1]])
mean(dftemps[[1]])
?max
dftempss=dftemps[c(1)]
dftempss
max(dftemps[[1]])
dftemps=subset(df,Month==5,select=c(Temp,Month))
max(dftemps[[1]])
df
dftemp
dftemps=subset(df,Month==5,select=c(Temp,Month))
dftemps
max(dftemps[[1]])
dftemps=subset(df,Month==5,select=c(Ozone,Month))
max(dftemps[[1]])
good=complete.cases(df)
dfgood=df[good,]
dfgood
dftemps=subset(dfgood,Month==5,select=c(Ozone,Month))
max(dftemps[[1]])
mean(dfgood[[1]])
x<-1:4
y<-2:3
x+y
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
?source
getwd()
dir()
dir()
source("submitscript1.R")
source("rprog-scripts-submitscript1.R")
submit()
source("rprog-scripts-submitscript1.R")
submit()
pollutantmean <- function(specdata, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
source("pollutantmean.R")
dir()
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(specdata, sulfate, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function("specdata", "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean <- function(specdata, sulfate, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(specdata, sulfate, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean <- function(specdata, sulfate, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
pollutantmean <- function(specdata, sulfate, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
df
dfcol
dfgood<-complete.cases(dfcol)
dfgood
dfgoodgraph<-dfcol[dfgood,]
dfgoodgraph
dfgoodgraph<-dfcol[dfgood,,drop=F]
dfgoodgraph
dfgoodgraph<-dfcol[dfgood,]
mean(dfgoodgraph)
specdata
y<-if(x>3){10} else {0}
X<-4
y
y<-if(x>3){10} else {0}
y<- if(x>3)
afsd
y<-if(x>3){}
y<-if(x>3){
10
}
y<-if(x>3){
10
} else {
0
}
for(i in 1:10)
{}
for(i in 1:10){}
for(i in 1:10){
print(i)
}
x<-c("a","b","c")
for(i in 1:3) print(x[i])
for(let in x) print let
for(let in x) print(let)
?rbinom
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x
x<-rbinom(1,1,0.5)
x<-rbinom(2,2,0.5)
x
x<-rbinom(2,2,0.5)
x
x<-rbinom(2,2,0.5)
x
z<-5
while(z>3 && z<10)
{
x<-rbinom(1,1,0.5)
print(x);
if(x==1){
z<-z+1
}
else{
z<-z-1
}
print(z)
}
while(z>3 && z<10)
+ {
+ x<-rbinom(1,1,0.5)
+ print(x);
+ if(x==1){
+ z<-z+1
+ }
+ else{
+ z<-z-1
+ }
+ print(z)
+ }
while(z>3 && z<10)
{
x<-rbinom(1,1,0.5)
print(x);
if(x==1){
z<-z+1
z<-z+1
}
else{
z<-z-1
print(z)
}
}
add1<-function(x, y){
x + y
}
add1(3,8)
subset10<-function(x){
for(i in 10:x)
print(i)
}
subset10(20)
subset10<-function(x){
use<- x > 10
print(x[use])
}
subset10(20)
subset10(9)
x<-1:20
subset10(x)
subset10<-function(x, n=10){
use<- x > n
print(x[use])
}
subset10(x)
subset10(x,12)
airquality
meancol <- function(x){
nc <- ncol(y)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(y[,i], na.rm=T)
}
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i], na.rm=T)
}
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i], na.rm=T)
}
means
}
meancol(airquality)
meancol <- function(x){
nc <- ncol(x)
means <-numeric(nc)
for(i in 1:nc){
means[i] = mean(x[,i])
}
means
}
meancol(airquality)
?cor
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
?paste
x<-"How are you"
y<-"Raunak"
z<-paste(x,y,sep=" ",collapse=NULL)
z
z<-paste(x,y)
z
?copy
z<-"Kochar"
w<-paste(x,y,z)
w
?lm
l<-lm(z)
l<-lm(x)
l<-lm(5)
?stats
lm(10)
lm<-function(x){
x*x
}
lm(10)
search()
?lm
add1<-1
f(1)
View(data)
View(dfcon)
View(dfcol)
View(dfnew)
View(dftempss)
view(data)
lapply
x<-list(a<-1:5,b<-rnorm(10))
lapply(x,mean)
lapply(x,mean)
x<-list(a<-1:5,b<-rnorm(10))
lapply(x,mean)
?rnorm
x<-list(a<-1:5,b<-rnorm(10))
b
mean(b)
lapply(x,mean)
?runif
u<-runif(20)
u
x<-1:20
lapply(x,runif)
lapply(x,runif,min=0,max=10)
?cor
rf<-read.csv(file = "C:/Users/RAUNAK KOCHAR/Documents/prog1/specdata/001.csv")
good<-complete.cases(rf);
nrow(rf[good,])
rfg <- rf[good,]
rfg
cor(rfg$nitrate, rfg$sulfate)
rf<-read.csv(file = "C:/Users/RAUNAK KOCHAR/Documents/prog1/specdata/002.csv")
good<-complete.cases(rf);
rfg <- rf[good,]
cor(rfg$nitrate, rfg$sulfate)
nrow(rfg)
submit()
install.packages(c("manipulate", "stringi"))
submit()
install.packages()
install.packages(c("RCurl", "bitops", "digest", "stringr"))
submit()
dir()
cd
getwd()
setwd("C:/Users/RAUNAK KOCHAR/Documents/prog1")
submit()
submit()
submit()
submit()
submit()
